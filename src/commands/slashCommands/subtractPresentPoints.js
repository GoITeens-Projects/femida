const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
// const { execute } = require("./xp");
const Level = require("../../models/Level");
const addPoints = require("../../utils/xp/addPoints");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("subtract-present-points")
    .setDescription("–í—ñ–¥–Ω—è—Ç–∏ XP –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞")
    .addUserOption((option) =>
      option
        .setName("target-user")
        .setDescription("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á XP —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω—è—Ç–∏")
        .setRequired(true)
    )
    .addNumberOption((option) =>
      option
        .setName("present-xp")
        .setDescription("–°–∫—ñ–ª—å–∫–∏ XP –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ")
        .setRequired(true)
    ),

  async execute(interaction) {
    if (!interaction.inGuild()) {
      await interaction.reply("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ");
      return;
    }

    const allowedRoles = [
      "953717386224226385",
      "953795856308510760",
      "1192066790717661245",
    ];

    const member = interaction.guild.members.cache.get(interaction.user.id);

    const hasAllowedRole = member.roles.cache.some((role) =>
      allowedRoles.includes(role.id)
    );

    if (!hasAllowedRole) {
      await interaction.reply(
        "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—î –ø—Ä–∞–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—ÉüôÉ"
      );
      return;
    }

    await interaction.deferReply();

    const mentionedUserId = interaction.options.get("target-user")?.value;
    const targetUserId = mentionedUserId || interaction.member.id;
    // console.log("mentionedUserId", mentionedUserId);
    const targetUserObj = await interaction.guild.members.fetch(targetUserId);

    let userInfo = await Level.findOne({
      userId: targetUserId,
      guildId: interaction.guild.id,
    });

    if (!userInfo) {
      await interaction.reply("–ù–∞–∂–∞–ª—å —Ç–∞–∫–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ(");
    }

    const replyEmbed = new EmbedBuilder()
      .setTitle("–û–ø–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ")
      .setColor("#FFD23F")
      .setTimestamp();

    let xpToSubtract = interaction.options.get("present-xp");

    if (xpToSubtract > userInfo.presentXp) {
      xpToSubtract = userInfo.presentXp;
    }

    await addPoints(targetUserId, -xpToSubtract, true);
    const newPresentXp = await Level.findOne({ userId: targetUserId });
    await interaction.editReply({
      embeds: [
        replyEmbed.setDescription(
          `${xpToSubtract} present-xp –±—É–ª–æ –≤—ñ–¥–Ω—è—Ç–æ —É ${targetUserObj.user.tag}. –ù–æ–≤–∏–π present-xp —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ \`${newPresentXp.presentXp}\``
        ),
      ],
    });
  },
};
